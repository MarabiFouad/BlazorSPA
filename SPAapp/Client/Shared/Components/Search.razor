@inject HttpClient http
@using System.Threading
@using System.Linq
<h3>Search</h3>


<div class="row">
    <div class="col-md-12">
        <input type="text" class="form-control" placeholder="Search among countries by name" @oninput="@((ChangeEventArgs e)=>SearchCountry(e))" />
        <button type="button" @onclick="OnSubmit">Show Selected</button>
    </div>
    @if (IsLoaded)
    {
        if (Countries.Any())
        {

            <div class="col-md-12 overflow-auto shadow bg-light" style="max-height:400px;">
                @foreach (var country in Countries)
                {
                    <div class="@country.ItemStyle searchitem">
                        <label class="m-0 p-2 d-block"><input type="checkbox" @onchange="@((ChangeEventArgs e)=> OnItemChange(e,country))" name="@country.name" /> @country.name</label>
                    </div>
                }
            </div>
        }

    }
    else
    {
        <Loading></Loading>

    }
</div>



@code {

    private string EnteredValue { get; set; } = string.Empty;
    private bool IsLoaded { get; set; } = true;
    private IEnumerable<Country> Countries = new List<Country>();
    CancellationTokenSource currentSearchCts;

    private void OnSubmit()
    {
        var selectedCountries = Countries.Where(x => x.IsSelected).ToList();
        selectedCountries.ForEach((x) => Console.WriteLine(x.name));
    }

    private void OnItemChange(ChangeEventArgs e, Country c)
    {
        c.IsSelected = (bool)e.Value;
        c.ItemStyle = c.IsSelected ? "bg-danger text-white" : "";
    }

    private void ClearCountries()
    {
        Countries = new List<Country>();
    }
    private async Task SearchCountry(ChangeEventArgs e)
    {
        try
        {
            if (string.IsNullOrEmpty(e.Value?.ToString())) { ClearCountries(); return; }

            currentSearchCts?.Cancel();
            currentSearchCts = new CancellationTokenSource();
            var cancellationToken = currentSearchCts.Token;

            if (!cancellationToken.IsCancellationRequested)
            {
                IsLoaded = false;
                HttpResponseMessage res;
                res = await http.GetAsync($"https://restcountries.eu/rest/v2/name/{e.Value}", cancellationToken);

                IsLoaded = true;
                if (res.StatusCode == System.Net.HttpStatusCode.OK)
                {
                    Countries = await res.Content.ReadFromJsonAsync<Country[]>();

                }
                else
                {
                    ClearCountries();
                }
            }
        }
        catch (OperationCanceledException ex)
        {

        }
        catch (Exception ex)
        {
            //Console.Error.WriteLine(ex.Message);
        }
    }

    public class Country
    {
        public string name { get; set; }
        public string capital { get; set; }
        public string region { get; set; }
        public bool IsSelected { get; set; }
        public string ItemStyle { get; set; }

    }
}
